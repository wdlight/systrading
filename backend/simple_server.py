"""
Í∞ÑÎã®Ìïú FastAPI ÏÑúÎ≤Ñ - ÌîÑÎ°†Ìä∏ÏóîÎìú Ïó∞Í≤∞ ÌÖåÏä§Ìä∏Ïö©
"""

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, Request, Response
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.base import BaseHTTPMiddleware
import asyncio
import json
import random
import time
import sys
import os

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏ Í≤ΩÎ°ú Ï∂îÍ∞Ä
project_root = os.path.join(os.path.dirname(__file__), '..')
sys.path.append(project_root)

# Ïã§Ï†ú API ÌÅ¥ÎûòÏä§ import
try:
    from brokers.korea_investment.ki_api import KoreaInvestAPI
    from brokers.korea_investment.ki_env import KoreaInvestEnv
    import yaml
    REAL_API_AVAILABLE = True
except ImportError as e:
    print(f"Real API import failed: {e}")
    REAL_API_AVAILABLE = False

app = FastAPI()

# Ïã§Ï†ú API Ïù∏Ïä§ÌÑ¥Ïä§ Ï¥àÍ∏∞Ìôî
real_api = None
if REAL_API_AVAILABLE:
    try:
        config_path = os.path.join(os.path.dirname(__file__), 'config.yaml')
        if os.path.exists(config_path):
            with open(config_path, 'r', encoding='utf-8') as f:
                config = yaml.safe_load(f)
            
            env = KoreaInvestEnv(config)
            base_headers = env.get_base_headers()
            full_config = env.get_full_config()
            
            real_api = KoreaInvestAPI(full_config, base_headers=base_headers)
            print("[OK] Real API initialized successfully")
        else:
            print("[FAIL] config.yaml not found")
    except Exception as e:
        print(f"[FAIL] Real API initialization failed: {e}")
        real_api = None

# CORS ÏÑ§Ï†ï
app.add_middleware(
    CORSMiddleware,
    allow_origins=[
        "http://localhost:3000", 
        "http://localhost:3001", 
        "http://localhost:3002",
        "http://127.0.0.1:3000",
        "http://127.0.0.1:3001", 
        "http://127.0.0.1:3002"
    ],
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
    expose_headers=["*"]
)

# Ï∂îÍ∞ÄÏ†ÅÏù∏ CORS Ìó§Îçî ÏÑ§Ï†ïÏùÑ ÏúÑÌïú ÎØ∏Îì§Ïõ®Ïñ¥
class CustomCORSMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        if request.method == "OPTIONS":
            response = Response()
            response.headers["Access-Control-Allow-Origin"] = request.headers.get("origin", "*")
            response.headers["Access-Control-Allow-Methods"] = "GET, POST, PUT, DELETE, OPTIONS"
            response.headers["Access-Control-Allow-Headers"] = "*"
            response.headers["Access-Control-Allow-Credentials"] = "true"
            return response
        
        response = await call_next(request)
        response.headers["Access-Control-Allow-Origin"] = request.headers.get("origin", "*")
        response.headers["Access-Control-Allow-Credentials"] = "true"
        return response

app.add_middleware(CustomCORSMiddleware)

# ÌôúÏÑ± WebSocket Ïó∞Í≤∞Îì§
active_connections = []

# Ïã§Ï†ú Îß§Îß§ Ï°∞Í±¥ ÏÑ§Ï†ï (Ï†ÑÏó≠ Î≥ÄÏàòÎ°ú ÏÉÅÌÉú Ïú†ÏßÄ)
trading_conditions_data = {
    "buy_conditions": {
        "rsi_lower": 30,
        "macd_signal": "positive_crossover",
        "amount": 100000,
        "enabled": True
    },
    "sell_conditions": {
        "rsi_upper": 70,
        "macd_signal": "negative_crossover",
        "profit_target": 5.0,
        "stop_loss": 2.0,
        "enabled": True
    },
    "auto_trading_enabled": False
}

@app.get("/")
async def root():
    """Ìó¨Ïä§Ï≤¥ÌÅ¨ ÏóîÎìúÌè¨Ïù∏Ìä∏"""
    return {
        "message": "Stock Trading API Server",
        "status": "running",
        "version": "1.0.0"
    }

@app.get("/hello")
async def hello():
    """Í∞ÑÎã®Ìïú Hello ÏóîÎìúÌè¨Ïù∏Ìä∏"""
    return {
        "message": "Hello from Stock Trading Backend! üìà",
        "status": "server is running",
        "timestamp": "2025-09-10",
        "active_connections": len(active_connections)
    }

@app.get("/debug/tokens")
async def debug_tokens():
    """ÌÜ†ÌÅ∞ ÏÉÅÌÉú ÎîîÎ≤ÑÍ∑∏"""
    try:
        import sys
        import os
        
        # ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏ Í≤ΩÎ°ú Ï∂îÍ∞Ä
        project_root = os.path.join(os.path.dirname(__file__), '..')
        sys.path.append(project_root)
        
        from app.core.config import get_settings
        settings = get_settings()
        
        return {
            "config_loaded": True,
            "tokens": {
                "api_approval_key": settings.KI_API_APPROVAL_KEY[:30] + "..." if settings.KI_API_APPROVAL_KEY else "EMPTY",
                "websocket_approval_key": settings.KI_WEBSOCKET_APPROVAL_KEY[:30] + "..." if settings.KI_WEBSOCKET_APPROVAL_KEY else "EMPTY",
                "account_access_token": "Present" if settings.KI_ACCOUNT_ACCESS_TOKEN else "EMPTY",
                "using_url": settings.KI_USING_URL,
            },
            "config_values": {
                "api_key": settings.KI_API_KEY[:10] + "..." if settings.KI_API_KEY else "EMPTY",
                "account_number": settings.KI_ACCOUNT_NUMBER,
                "is_paper_trading": settings.KI_IS_PAPER_TRADING
            }
        }
    except Exception as e:
        return {
            "config_loaded": False,
            "error": str(e),
            "error_type": type(e).__name__
        }

@app.get("/health")
async def health_check():
    """ÏÉÅÏÑ∏ Ìó¨Ïä§Ï≤¥ÌÅ¨"""
    return {
        "status": "healthy",
        "active_connections": len(active_connections)
    }

@app.get("/api/account/balance")
async def get_account_balance():
    """Ïã§Ï†ú Í≥ÑÏ¢å ÏûîÍ≥† Îç∞Ïù¥ÌÑ∞ ÎòêÎäî ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞"""
    if real_api:
        try:
            # Ïã§Ï†ú API Ìò∏Ï∂ú
            print(f"[DEBUG] Calling real_api.get_acct_balance()...")
            result = real_api.get_acct_balance()
            print(f"[DEBUG] real_api.get_acct_balance() result type: {type(result)}")
            if isinstance(result, tuple) and len(result) >= 2:
                print(f"[DEBUG] Account Balance - Total Value: {result[0]}, DataFrame Shape: {result[1].shape if hasattr(result[1], 'shape') else 'N/A'}")
                if hasattr(result[1], 'head'):
                    print(f"[DEBUG] DataFrame Head:\n{result[1].head()}")
            else:
                print(f"[DEBUG] Account Balance - Raw result: {result}")
            
            print(f"[DEBUG] API call returned: {type(result)}, length: {len(result) if result else 'None'}")
            if result and len(result) >= 2:
                total_value, df = result[0], result[1]

                
                positions = []
                total_profit_loss = 0
                
                if df is not None and not df.empty:
                    for idx, row in df.iterrows():
                        stock_code = str(row.get('Ï¢ÖÎ™©ÏΩîÎìú', str(idx)))
                        quantity = int(row.get('Î≥¥Ïú†ÏàòÎüâ', 0))
                        avg_price = int(row.get('Îß§ÏûÖÎã®Í∞Ä', 0))
                        current_price = int(row.get('ÌòÑÏû¨Í∞Ä', 0))
                        profit_loss = (current_price - avg_price) * quantity if avg_price > 0 else 0
                        profit_rate = float(row.get('ÏàòÏùµÎ•†', 0.0))
                        
                        total_profit_loss += profit_loss
                        
                        position = {
                            "stock_code": stock_code,
                            "stock_name": str(row.get('Ï¢ÖÎ™©Î™Ö', '')),
                            "quantity": quantity,
                            "avg_price": avg_price,
                            "current_price": current_price,
                            "yesterday_price": current_price - int(row.get('Ï†ÑÏùºÎåÄÎπÑ', 0)),
                            "profit_loss": profit_loss,
                            "profit_loss_rate": profit_rate,
                            "profit_rate": profit_rate,
                            "evaluation_amount": current_price * quantity,
                            "change_rate": float(row.get('Ï†ÑÏùºÎåÄÎπÑ Îì±ÎùΩÎ•†', 0.0))
                        }
                        positions.append(position)
                
                # Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Î∞òÌôò
                return {
                    "total_value": int(total_value) if total_value else 0,
                    "total_evaluation_amount": int(total_value) if total_value else 0,
                    "total_profit_loss": total_profit_loss,
                    "total_profit_loss_rate": round((total_profit_loss / (int(total_value) - total_profit_loss)) * 100, 2) if total_value > total_profit_loss else 0.0,
                    "available_cash": max(0, int(total_value) - sum(p["evaluation_amount"] for p in positions)),
                    "positions": positions
                }
        except Exception as e:
            print(f"Real API call failed: {e}")
    
    # ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ (API Ïã§Ìå®Ïãú ÎòêÎäî ÏÇ¨Ïö© Î∂àÍ∞ÄÏãú)
    return {
        "total_value": 10000000,
        "total_evaluation_amount": 10000000,
        "total_profit_loss": 500000,
        "total_profit_loss_rate": 5.26,
        "available_cash": 2000000,
        "positions": [
            {
                "stock_code": "005930",
                "stock_name": "ÏÇºÏÑ±Ï†ÑÏûê",
                "quantity": 10,
                "avg_price": 75000,
                "current_price": 78000,
                "yesterday_price": 77000,
                "profit_loss": 30000,
                "profit_loss_rate": 4.0,
                "profit_rate": 4.0,
                "evaluation_amount": 780000,
                "change_rate": 1.3
            }
        ]
    }

@app.get("/api/trading/conditions")
async def get_trading_conditions():
    """Ïã§Ï†ú Îß§Îß§ Ï°∞Í±¥ Î∞òÌôò"""
    global trading_conditions_data
    
    if real_api:
        try:
            # Ïã§Ï†ú APIÎÇò ÏÑúÎπÑÏä§ÏóêÏÑú Îß§Îß§ Ï°∞Í±¥ÏùÑ Í∞ÄÏ†∏Ïò¨ Ïàò ÏûàÎã§Î©¥
            # Ïó¨Í∏∞ÏÑú Ï≤òÎ¶¨. ÌòÑÏû¨Îäî Ï†ÑÏó≠ ÏÑ§Ï†ï Î∞òÌôò
            return trading_conditions_data.copy()
        except Exception as e:
            print(f"[FAIL] Trading conditions API call failed: {e}")
    
    # Ï†ÑÏó≠ ÏÑ§Ï†ï Îç∞Ïù¥ÌÑ∞ Î∞òÌôò
    return trading_conditions_data.copy()

@app.put("/api/trading/conditions")
async def update_trading_conditions(conditions: dict):
    """Îß§Îß§ Ï°∞Í±¥ ÏóÖÎç∞Ïù¥Ìä∏ - Ïã§Ï†ú ÏÑ§Ï†ïÏóê Ï†ÄÏû•"""
    global trading_conditions_data
    
    try:
        # ÏûÖÎ†• Í≤ÄÏ¶ù Î∞è ÏóÖÎç∞Ïù¥Ìä∏
        if "buy_conditions" in conditions:
            buy_conditions = conditions["buy_conditions"]
            if "rsi_lower" in buy_conditions:
                trading_conditions_data["buy_conditions"]["rsi_lower"] = max(0, min(100, int(buy_conditions["rsi_lower"])))
            if "macd_signal" in buy_conditions:
                trading_conditions_data["buy_conditions"]["macd_signal"] = buy_conditions["macd_signal"]
            if "amount" in buy_conditions:
                trading_conditions_data["buy_conditions"]["amount"] = max(1000, int(buy_conditions["amount"]))
            if "enabled" in buy_conditions:
                trading_conditions_data["buy_conditions"]["enabled"] = bool(buy_conditions["enabled"])
        
        if "sell_conditions" in conditions:
            sell_conditions = conditions["sell_conditions"]
            if "rsi_upper" in sell_conditions:
                trading_conditions_data["sell_conditions"]["rsi_upper"] = max(0, min(100, int(sell_conditions["rsi_upper"])))
            if "macd_signal" in sell_conditions:
                trading_conditions_data["sell_conditions"]["macd_signal"] = sell_conditions["macd_signal"]
            if "profit_target" in sell_conditions:
                trading_conditions_data["sell_conditions"]["profit_target"] = max(0.1, float(sell_conditions["profit_target"]))
            if "stop_loss" in sell_conditions:
                trading_conditions_data["sell_conditions"]["stop_loss"] = max(0.1, float(sell_conditions["stop_loss"]))
            if "enabled" in sell_conditions:
                trading_conditions_data["sell_conditions"]["enabled"] = bool(sell_conditions["enabled"])
        
        if "auto_trading_enabled" in conditions:
            trading_conditions_data["auto_trading_enabled"] = bool(conditions["auto_trading_enabled"])
        
        # ÏÑ§Ï†ïÏù¥ ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÎã§Îäî Î°úÍ∑∏
        print(f"[OK] Îß§Îß§ Ï°∞Í±¥ ÏóÖÎç∞Ïù¥Ìä∏: {trading_conditions_data}")
        
        # Ïã§Ï†ú Íµ¨ÌòÑÏóêÏÑúÎäî ÌååÏùºÏù¥ÎÇò Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§Ïóê Ï†ÄÏû•
        # save_trading_conditions_to_file(trading_conditions_data)
        
        return {
            "status": "success", 
            "message": "Îß§Îß§ Ï°∞Í±¥Ïù¥ ÏóÖÎç∞Ïù¥Ìä∏ÎêòÏóàÏäµÎãàÎã§.",
            "updated_conditions": trading_conditions_data.copy()
        }
        
    except Exception as e:
        print(f"[FAIL] Trading conditions update failed: {e}")
        return {
            "status": "error",
            "message": f"Îß§Îß§ Ï°∞Í±¥ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: {str(e)}"
        }

@app.post("/api/account/refresh")
async def refresh_account_info():
    """Í≥ÑÏ¢å Ï†ïÎ≥¥ Í∞±Ïã†"""
    return {"status": "success", "message": "Í≥ÑÏ¢å Ï†ïÎ≥¥Í∞Ä Í∞±Ïã†ÎêòÏóàÏäµÎãàÎã§."}

def create_watchlist_item_debug(stock_code: str, account_row, chart_df):
    """Í≥ÑÏ¢å Îç∞Ïù¥ÌÑ∞ + Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞Î°ú ÏõåÏπòÎ¶¨Ïä§Ìä∏ ÏïÑÏù¥ÌÖú ÏÉùÏÑ± (Debug Í∞ïÌôî)"""
    from datetime import datetime

    print(f"[DEBUG] create_watchlist_item_debug() ÏãúÏûë - {stock_code}")

    # Í≥ÑÏ¢å Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Í∏∞Î≥∏ Ï†ïÎ≥¥ Ï∂îÏ∂ú
    current_price = int(account_row.get('ÌòÑÏû¨Í∞Ä', 0))
    avg_price = int(account_row.get('Îß§ÏûÖÎã®Í∞Ä', 0))
    quantity = int(account_row.get('Î≥¥Ïú†ÏàòÎüâ', 0))
    profit_rate = float(account_row.get('ÏàòÏùµÎ•†', 0.0))
    stock_name = str(account_row.get('Ï¢ÖÎ™©Î™Ö', ''))

    print(f"[DEBUG] Í∏∞Î≥∏ Ï†ïÎ≥¥ - ÌòÑÏû¨Í∞Ä: {current_price}, ÌèâÎã®: {avg_price}, ÏàòÎüâ: {quantity}, ÏàòÏùµÎ•†: {profit_rate}%")

    # Í∏∞Ïà†ÏßÄÌëú Í≥ÑÏÇ∞ ÎòêÎäî ÎçîÎØ∏Í∞í
    if chart_df is not None and not chart_df.empty:
        print(f"[DEBUG] Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏûàÏùå - Í∏∞Ïà†ÏßÄÌëú Í≥ÑÏÇ∞ ÏãúÎèÑ")

        # RSI Í≥ÑÏÇ∞ ÎòêÎäî ÎçîÎØ∏Í∞í
        if 'RSI' in chart_df.columns:
            rsi = round(float(chart_df['RSI'].iloc[-1]), 2)
            print(f"[DEBUG] RSI Ïã§Ï†úÍ∞í: {rsi}")
        else:
            rsi = round(45.2 + (hash(stock_code) % 50), 2)
            print(f"[DEBUG] RSI ÎçîÎØ∏Í∞í: {rsi}")

        # MACD Í≥ÑÏÇ∞ ÎòêÎäî ÎçîÎØ∏Í∞í
        if 'MACD' in chart_df.columns and 'MACD_signal' in chart_df.columns:
            macd = round(float(chart_df['MACD'].iloc[-1]), 2)
            macd_signal = round(float(chart_df['MACD_signal'].iloc[-1]), 2)
            print(f"[DEBUG] MACD Ïã§Ï†úÍ∞í: {macd}, ÏãúÍ∑∏ÎÑê: {macd_signal}")
        else:
            macd = round(120.5 + (hash(stock_code) % 200) - 100, 2)
            macd_signal = round(macd - 2.2, 2)
            print(f"[DEBUG] MACD ÎçîÎØ∏Í∞í: {macd}, ÏãúÍ∑∏ÎÑê: {macd_signal}")
    else:
        print(f"[DEBUG] Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå - Î™®Îì† ÏßÄÌëú ÎçîÎØ∏Í∞í ÏÇ¨Ïö©")
        rsi = 50.0
        macd = 0.0
        macd_signal = 0.0

    # ÏõåÏπòÎ¶¨Ïä§Ìä∏ ÏïÑÏù¥ÌÖú Íµ¨ÏÑ±
    stock_item = {
        "stock_code": stock_code,
        "stock_name": stock_name,
        "current_price": current_price,
        "profit_rate": profit_rate,
        "avg_price": avg_price,
        "quantity": quantity,
        "macd": macd,
        "macd_signal": macd_signal,
        "rsi": rsi,
        "trailing_stop_activated": False,
        "trailing_stop_high": 0,
        "volume": 1000000 + (hash(stock_code) % 4000000),  # ÎçîÎØ∏Í∞í
        "change_amount": current_price - avg_price if avg_price > 0 else 0,
        "change_rate": profit_rate,
        "yesterday_price": avg_price,
        "high_price": current_price + abs((current_price - avg_price) // 2) if avg_price > 0 else current_price + 500,
        "low_price": current_price - abs((current_price - avg_price) // 2) if avg_price > 0 else current_price - 500,
        "updated_at": datetime.now().isoformat()
    }

    print(f"[DEBUG] create_watchlist_item_debug() ÏôÑÎ£å - {stock_code}")
    return stock_item

@app.get("/api/watchlist")
async def get_watchlist():
    """Ïã§Ï†ú Í≥ÑÏ¢å Î≥¥Ïú†Ï¢ÖÎ™© Í∏∞Î∞ò ÏõåÏπòÎ¶¨Ïä§Ìä∏ (Debug Í∞ïÌôî)"""

    print(f"[DEBUG] === get_watchlist() ÏãúÏûë ===")
    print(f"[DEBUG] real_api ÏÇ¨Ïö© Í∞ÄÎä•: {real_api is not None}")

    if real_api:
        try:
            print(f"[DEBUG] get_acct_balance() Ìò∏Ï∂ú ÏãúÏûë...")
            account_result = real_api.get_acct_balance()

            print(f"[DEBUG] get_acct_balance() Î∞òÌôòÍ∞í ÌÉÄÏûÖ: {type(account_result)}")
            print(f"[DEBUG] get_acct_balance() Î∞òÌôòÍ∞í Í∏∏Ïù¥: {len(account_result) if account_result else 'None'}")

            if account_result and len(account_result) >= 2:
                total_value, df = account_result[0], account_result[1]

                print(f"[DEBUG] Ï¥ù ÌèâÍ∞ÄÍ∏àÏï°: {total_value}")
                print(f"[DEBUG] DataFrame ÌÉÄÏûÖ: {type(df)}")
                print(f"[DEBUG] DataFrame ÌòïÌÉú: {df.shape if df is not None else 'None'}")

                if df is not None and not df.empty:
                    print(f"[DEBUG] DataFrame Ïª¨Îüº: {list(df.columns)}")
                    print(f"[DEBUG] DataFrame Ï†ÑÏ≤¥ ÎÇ¥Ïö©:")
                    print(df.to_string())

                    # Î≥¥Ïú†ÏàòÎüâ > 0 ÌïÑÌÑ∞ÎßÅ
                    holding_stocks = df[df['Î≥¥Ïú†ÏàòÎüâ'] > 0]
                    print(f"[DEBUG] Î≥¥Ïú†Ï¢ÖÎ™© ÌïÑÌÑ∞ÎßÅ ÌõÑ Í∞úÏàò: {len(holding_stocks)}")
                    print(f"[DEBUG] Î≥¥Ïú†Ï¢ÖÎ™© Î¶¨Ïä§Ìä∏:")
                    print(holding_stocks.to_string())

                    result = []
                    for idx, row in holding_stocks.iterrows():
                        stock_code = str(row.get('Ï¢ÖÎ™©ÏΩîÎìú'))
                        stock_name = str(row.get('Ï¢ÖÎ™©Î™Ö'))

                        print(f"\n[DEBUG] --- Ï¢ÖÎ™© {stock_code}({stock_name}) Ï≤òÎ¶¨ ÏãúÏûë ---")
                        print(f"[DEBUG] Í≥ÑÏ¢å Îç∞Ïù¥ÌÑ∞: {row.to_dict()}")

                        # Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
                        print(f"[DEBUG] get_minute_chart_data({stock_code}) Ìò∏Ï∂ú...")
                        chart_df = real_api.get_minute_chart_data(stock_code)

                        print(f"[DEBUG] Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÌÉÄÏûÖ: {type(chart_df)}")
                        if chart_df is not None and not chart_df.empty:
                            print(f"[DEBUG] Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÌòïÌÉú: {chart_df.shape}")
                            print(f"[DEBUG] Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ïª¨Îüº: {list(chart_df.columns)}")
                            print(f"[DEBUG] Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÎßàÏßÄÎßâ 5Ìñâ:")
                            print(chart_df.tail().to_string())
                        else:
                            print(f"[DEBUG] Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùå ÎòêÎäî Îπà DataFrame")

                        # ÏõåÏπòÎ¶¨Ïä§Ìä∏ ÏïÑÏù¥ÌÖú ÏÉùÏÑ±
                        stock_item = create_watchlist_item_debug(stock_code, row, chart_df)
                        print(f"[DEBUG] ÏÉùÏÑ±Îêú ÏõåÏπòÎ¶¨Ïä§Ìä∏ ÏïÑÏù¥ÌÖú: {stock_item}")

                        result.append(stock_item)
                        print(f"[DEBUG] --- Ï¢ÖÎ™© {stock_code} Ï≤òÎ¶¨ ÏôÑÎ£å ---\n")

                    print(f"[DEBUG] ÏµúÏ¢Ö ÏõåÏπòÎ¶¨Ïä§Ìä∏ Í∞úÏàò: {len(result)}")
                    print(f"[DEBUG] ÏµúÏ¢Ö Î∞òÌôò Îç∞Ïù¥ÌÑ∞:")
                    for item in result:
                        print(f"  - {item['stock_code']} ({item['stock_name']}): {item['current_price']}Ïõê")

                    return result
                else:
                    print(f"[DEBUG] DataFrameÏù¥ NoneÏù¥Í±∞ÎÇò ÎπÑÏñ¥ÏûàÏùå")
            else:
                print(f"[DEBUG] account_resultÍ∞Ä NoneÏù¥Í±∞ÎÇò Í∏∏Ïù¥Í∞Ä 2 ÎØ∏Îßå")

        except Exception as e:
            print(f"[DEBUG] ÏòàÏô∏ Î∞úÏÉù: {type(e).__name__}: {e}")
            import traceback
            print(f"[DEBUG] ÏÉÅÏÑ∏ Ïä§ÌÉùÌä∏Î†àÏù¥Ïä§:")
            traceback.print_exc()

    print(f"[DEBUG] Îπà Î¶¨Ïä§Ìä∏ Î∞òÌôò")
    return []

@app.get("/debug/account")
async def debug_account_info():
    """Í≥ÑÏ¢å Ï†ïÎ≥¥ ÎîîÎ≤ÑÍ∑∏Ïö© ÏóîÎìúÌè¨Ïù∏Ìä∏"""

    print(f"[DEBUG] /debug/account Ìò∏Ï∂úÎê®")

    if not real_api:
        return {"error": "real_api ÏÇ¨Ïö© Î∂àÍ∞Ä"}

    try:
        print(f"[DEBUG] get_acct_balance() Ìò∏Ï∂ú...")
        account_result = real_api.get_acct_balance()

        result = {
            "api_available": True,
            "result_type": str(type(account_result)),
            "result_length": len(account_result) if account_result else 0,
        }

        if account_result and len(account_result) >= 2:
            total_value, df = account_result[0], account_result[1]

            result.update({
                "total_value": total_value,
                "dataframe_type": str(type(df)),
                "dataframe_shape": df.shape if df is not None else None,
                "dataframe_columns": list(df.columns) if df is not None else None,
                "dataframe_data": df.to_dict('records') if df is not None and not df.empty else [],
                "holding_count": len(df[df['Î≥¥Ïú†ÏàòÎüâ'] > 0]) if df is not None and not df.empty else 0
            })

        print(f"[DEBUG] debug Í≤∞Í≥º: {result}")
        return result

    except Exception as e:
        print(f"[DEBUG] debug ÏòàÏô∏: {e}")
        import traceback
        traceback.print_exc()

        return {
            "error": str(e),
            "error_type": type(e).__name__,
            "api_available": False
        }

@app.get("/api/market/overview")
async def get_market_overview():
    """ÏãúÏû• Í∞úÏöî - ÏùºÎ∂Ä Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Ìè¨Ìï®"""
    
    # Í∏∞Î≥∏ ÏãúÏû• ÏßÄÏàòÎäî ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ (Î≥ÑÎèÑ API ÌïÑÏöî)
    market_data = {
        "market_status": "open",
        "kospi": {
            "current": 2580.45 + random.uniform(-50, 50),
            "change": random.uniform(-30, 30),
            "change_rate": random.uniform(-1.5, 1.5)
        },
        "kosdaq": {
            "current": 850.23 + random.uniform(-20, 20),
            "change": random.uniform(-15, 15),
            "change_rate": random.uniform(-1.0, 1.0)
        },
        "usd_krw": {
            "current": 1340.5 + random.uniform(-10, 10),
            "change": random.uniform(-5, 5),
            "change_rate": random.uniform(-0.5, 0.5)
        }
    }
    
    # Ï¢ÖÎ™©Î≥Ñ Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    top_gainers_stocks = [
        {"stock_code": "005930", "stock_name": "ÏÇºÏÑ±Ï†ÑÏûê"},
        {"stock_code": "000660", "stock_name": "SKÌïòÏù¥ÎãâÏä§"}
    ]
    
    top_losers_stocks = [
        {"stock_code": "035720", "stock_name": "Ïπ¥Ïπ¥Ïò§"}
    ]
    
    if real_api:
        try:
            # Ïã§Ï†ú APIÏóêÏÑú Ï£ºÏöî Ï¢ÖÎ™© Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
            top_gainers = []
            for stock in top_gainers_stocks:
                stock_code = stock["stock_code"]
                stock_name = stock["stock_name"]
                
                df = real_api.get_minute_chart_data(stock_code)
                if df is not None and not df.empty:
                    latest = df.iloc[-1]
                    current_price = int(latest["Ï¢ÖÍ∞Ä"])
                    
                    # Ï†ÑÏùº ÎåÄÎπÑ Í≥ÑÏÇ∞
                    if len(df) > 1:
                        prev_price = int(df.iloc[-2]["Ï¢ÖÍ∞Ä"])
                        change_rate = round((current_price - prev_price) / prev_price * 100, 2) if prev_price > 0 else 0.0
                    else:
                        change_rate = round(random.uniform(1.0, 5.0), 2)
                    
                    top_gainers.append({
                        "stock_code": stock_code,
                        "stock_name": stock_name,
                        "current_price": current_price,
                        "change_rate": abs(change_rate)  # ÏñëÏàòÎ°ú ÌëúÏãú
                    })
                else:
                    # API Ïã§Ìå®Ïãú ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞
                    top_gainers.append({
                        "stock_code": stock_code,
                        "stock_name": stock_name,
                        "current_price": 78000 if stock_code == "005930" else 125000,
                        "change_rate": round(random.uniform(1.0, 5.0), 2)
                    })
            
            # ÌïòÎùΩ Ï¢ÖÎ™©
            top_losers = []
            for stock in top_losers_stocks:
                stock_code = stock["stock_code"]
                stock_name = stock["stock_name"]
                
                df = real_api.get_minute_chart_data(stock_code)
                if df is not None and not df.empty:
                    latest = df.iloc[-1]
                    current_price = int(latest["Ï¢ÖÍ∞Ä"])
                    
                    if len(df) > 1:
                        prev_price = int(df.iloc[-2]["Ï¢ÖÍ∞Ä"])
                        change_rate = round((current_price - prev_price) / prev_price * 100, 2) if prev_price > 0 else 0.0
                    else:
                        change_rate = round(random.uniform(-4.0, -1.0), 2)
                    
                    top_losers.append({
                        "stock_code": stock_code,
                        "stock_name": stock_name,
                        "current_price": current_price,
                        "change_rate": min(change_rate, -0.1)  # ÏùåÏàòÎ°ú ÌëúÏãú
                    })
                else:
                    # API Ïã§Ìå®Ïãú ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞
                    top_losers.append({
                        "stock_code": stock_code,
                        "stock_name": stock_name,
                        "current_price": 45000,
                        "change_rate": round(random.uniform(-4.0, -1.0), 2)
                    })
            
            market_data["top_gainers"] = top_gainers
            market_data["top_losers"] = top_losers
            return market_data
            
        except Exception as e:
            print(f"[FAIL] Market overview API call failed: {e}")
    
    # ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ (API Ïã§Ìå®Ïãú ÎòêÎäî ÏÇ¨Ïö© Î∂àÍ∞ÄÏãú)
    market_data.update({
        "top_gainers": [
            {
                "stock_code": "005930",
                "stock_name": "ÏÇºÏÑ±Ï†ÑÏûê",
                "current_price": 78000 + random.randint(-2000, 3000),
                "change_rate": round(random.uniform(1.0, 5.0), 2)
            },
            {
                "stock_code": "000660", 
                "stock_name": "SKÌïòÏù¥ÎãâÏä§",
                "current_price": 130000 + random.randint(-3000, 5000),
                "change_rate": round(random.uniform(1.0, 4.0), 2)
            }
        ],
        "top_losers": [
            {
                "stock_code": "035720",
                "stock_name": "Ïπ¥Ïπ¥Ïò§",
                "current_price": 45000 + random.randint(-5000, 1000),
                "change_rate": round(random.uniform(-4.0, -1.0), 2)
            }
        ]
    })
    
    return market_data

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket):
    """WebSocket Ïó∞Í≤∞"""
    client_host = websocket.client.host if websocket.client else "unknown"
    try:
        await websocket.accept()
        active_connections.append(websocket)
        print(f"WebSocket Ïó∞Í≤∞Îê®: {client_host} - ÌôúÏÑ± Ïó∞Í≤∞ Ïàò: {len(active_connections)}")
        
        # Ïó∞Í≤∞ ÏÑ±Í≥µ Î©îÏãúÏßÄ Ï†ÑÏÜ°
        await websocket.send_text(json.dumps({
            "type": "connection",
            "status": "connected",
            "message": "WebSocket Ïó∞Í≤∞Ïù¥ ÏÑ±Í≥µÌñàÏäµÎãàÎã§.",
            "server_time": int(time.time())
        }))
        
        # Ï£ºÍ∏∞Ï†ÅÏúºÎ°ú Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° (Î≥¥Ïú†Ï¢ÖÎ™© Í∏∞Î∞ò)
        iteration = 0
        while True:
            iteration += 1
            print(f"\n[DEBUG] === WebSocket Ï†ÑÏÜ° #{iteration} ({client_host}) ===")

            # Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏
            if websocket.client_state.name != "CONNECTED":
                print(f"[DEBUG] WebSocket Ïó∞Í≤∞ ÏÉÅÌÉú Ïù¥ÏÉÅ: {websocket.client_state.name}")
                break

            # Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ÎèÑ Î≥¥Ïú†Ï¢ÖÎ™© Í∏∞Î∞òÏúºÎ°ú ÏÉùÏÑ±
            realtime_data = []

            if real_api:
                try:
                    print(f"[DEBUG] WebSocketÏóêÏÑú get_acct_balance() Ìò∏Ï∂ú...")
                    account_result = real_api.get_acct_balance()

                    print(f"[DEBUG] WebSocket account_result ÌÉÄÏûÖ: {type(account_result)}")

                    if account_result and len(account_result) >= 2:
                        total_value, df = account_result[0], account_result[1]
                        print(f"[DEBUG] WebSocket Ï¥ù ÌèâÍ∞ÄÍ∏àÏï°: {total_value}")

                        if df is not None and not df.empty:
                            holding_stocks = df[df['Î≥¥Ïú†ÏàòÎüâ'] > 0]
                            print(f"[DEBUG] WebSocket Î≥¥Ïú†Ï¢ÖÎ™© Ïàò: {len(holding_stocks)}")

                            for idx, row in holding_stocks.iterrows():
                                stock_code = str(row.get('Ï¢ÖÎ™©ÏΩîÎìú'))
                                print(f"[DEBUG] WebSocket Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ ÏÉùÏÑ±: {stock_code}")

                                # Ïã§Ï†ú Í≥ÑÏ¢å Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö© (ÎûúÎç§ Î≥ÄÎèô Ï†úÍ±∞)
                                current_price = int(row.get('ÌòÑÏû¨Í∞Ä', 0))
                                avg_price = int(row.get('Îß§ÏûÖÎã®Í∞Ä', 0))
                                quantity = int(row.get('Î≥¥Ïú†ÏàòÎüâ', 0))
                                profit_rate = float(row.get('ÏàòÏùµÎ•†', 0.0))
                                change_amount = int(row.get('Ï†ÑÏùºÎåÄÎπÑ', 0))
                                change_rate = float(row.get('Ï†ÑÏùºÎåÄÎπÑ Îì±ÎùΩÎ•†', 0.0))

                                # Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ÏóêÏÑú Í∏∞Ïà†ÏßÄÌëú Ï°∞Ìöå ÏãúÎèÑ
                                try:
                                    chart_df = real_api.get_minute_chart_data(stock_code)
                                    if chart_df is not None and not chart_df.empty:
                                        # RSI Í≥ÑÏÇ∞ ÎòêÎäî ÎçîÎØ∏Í∞í
                                        if 'RSI' in chart_df.columns:
                                            rsi = round(float(chart_df['RSI'].iloc[-1]), 2)
                                        else:
                                            rsi = 50.0

                                        # MACD Í≥ÑÏÇ∞ ÎòêÎäî ÎçîÎØ∏Í∞í
                                        if 'MACD' in chart_df.columns and 'MACD_signal' in chart_df.columns:
                                            macd = round(float(chart_df['MACD'].iloc[-1]), 2)
                                            macd_signal = round(float(chart_df['MACD_signal'].iloc[-1]), 2)
                                        else:
                                            macd = 0.0
                                            macd_signal = 0.0

                                        # Í±∞ÎûòÎüâ
                                        if 'Í±∞ÎûòÎüâ' in chart_df.columns:
                                            volume = int(chart_df['Í±∞ÎûòÎüâ'].iloc[-1])
                                        else:
                                            volume = 0

                                        # Í≥†Í∞Ä/Ï†ÄÍ∞Ä
                                        if 'Í≥†Í∞Ä' in chart_df.columns and 'Ï†ÄÍ∞Ä' in chart_df.columns:
                                            high_price = int(chart_df['Í≥†Í∞Ä'].iloc[-1])
                                            low_price = int(chart_df['Ï†ÄÍ∞Ä'].iloc[-1])
                                        else:
                                            high_price = current_price
                                            low_price = current_price
                                    else:
                                        # Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ ÏóÜÏùÑ Îïå Í∏∞Î≥∏Í∞í
                                        rsi = 50.0
                                        macd = 0.0
                                        macd_signal = 0.0
                                        volume = 0
                                        high_price = current_price
                                        low_price = current_price
                                except Exception as chart_error:
                                    print(f"[DEBUG] {stock_code} Ï∞®Ìä∏ Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå Ïã§Ìå®: {chart_error}")
                                    rsi = 50.0
                                    macd = 0.0
                                    macd_signal = 0.0
                                    volume = 0
                                    high_price = current_price
                                    low_price = current_price

                                realtime_item = {
                                    "stock_code": stock_code,
                                    "stock_name": str(row.get('Ï¢ÖÎ™©Î™Ö', '')),
                                    "current_price": current_price,
                                    "profit_rate": profit_rate,
                                    "avg_price": avg_price,
                                    "quantity": quantity,
                                    "macd": macd,
                                    "macd_signal": macd_signal,
                                    "rsi": rsi,
                                    "trailing_stop_activated": False,
                                    "trailing_stop_high": 0,
                                    "volume": volume,
                                    "change_amount": change_amount,
                                    "change_rate": change_rate,
                                    "yesterday_price": current_price - change_amount if change_amount != 0 else current_price,
                                    "high_price": high_price,
                                    "low_price": low_price,
                                    "updated_at": f"2025-09-17T{time.strftime('%H:%M:%S')}Z"
                                }

                                realtime_data.append(realtime_item)
                                print(f"[DEBUG] {stock_code} Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞: {current_price}Ïõê (ÏàòÏùµÎ•†: {profit_rate}%)")
                        else:
                            print(f"[DEBUG] WebSocket DataFrame ÏóÜÏùå - Îπà Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞")
                    else:
                        print(f"[DEBUG] WebSocket account_result Î¨∏Ï†ú")

                except Exception as e:
                    print(f"[DEBUG] WebSocket Í≥ÑÏ¢å Ï°∞Ìöå Ïã§Ìå®: {e}")

            print(f"[DEBUG] WebSocket Ï†ÑÏÜ°Ìï† Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞ Í∞úÏàò: {len(realtime_data)}")

            data = {
                "type": "watchlist_update",
                "data": realtime_data,
                "timestamp": int(time.time())
            }

            try:
                await websocket.send_text(json.dumps(data))
                print(f"[DEBUG] WebSocket Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ° ÏÑ±Í≥µ ({client_host}): {len(realtime_data)}Í∞ú Ï¢ÖÎ™©")
                await asyncio.sleep(2)  # 2Ï¥àÎßàÎã§ Îç∞Ïù¥ÌÑ∞ Ï†ÑÏÜ°
            except Exception as send_error:
                print(f"[DEBUG] WebSocket Ï†ÑÏÜ° Ïò§Î•ò ({client_host}): {send_error}")
                break
            
    except WebSocketDisconnect as e:
        if websocket in active_connections:
            active_connections.remove(websocket)
        print(f"WebSocket Ï†ïÏÉÅ Ïó∞Í≤∞ Ìï¥Ï†ú: {client_host} (code: {e.code}) - ÌôúÏÑ± Ïó∞Í≤∞ Ïàò: {len(active_connections)}")
    except Exception as e:
        if websocket in active_connections:
            active_connections.remove(websocket)
        print(f"WebSocket ÏòàÏô∏ Î∞úÏÉù ({client_host}): {type(e).__name__}: {e}")
        print(f"ÌôúÏÑ± Ïó∞Í≤∞ Ïàò: {len(active_connections)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        "simple_server:app",
        host="0.0.0.0",
        port=8000,
        reload=True,
        log_level="info"
    )