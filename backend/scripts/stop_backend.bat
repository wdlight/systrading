@echo off
REM Stock Trading Backend Server Stop Script (Windows)
REM This script stops the running FastAPI backend server
REM 
REM ÏÇ¨Ïö©Î≤ï: Ïñ¥ÎîîÏÑúÎì† Ïã§Ìñâ Í∞ÄÎä•ÌïòÏßÄÎßå, backend ÏÑúÎ≤ÑÎ•º Ï∞æÏïÑÏÑú Ï§ëÏßÄÏãúÌÇµÎãàÎã§.

echo üõë Stopping Stock Trading Backend Server...
echo ============================================

REM Ïã§Ìñâ ÏúÑÏπò Ï†ÄÏû•
set "ORIGINAL_DIR=%CD%"
echo üìÅ Original execution directory: %ORIGINAL_DIR%

REM Ïä§ÌÅ¨Î¶ΩÌä∏ ÌååÏùºÏùò Ï†àÎåÄ Í≤ΩÎ°ú Ï∞æÍ∏∞
set "SCRIPT_DIR=%~dp0"
echo üìÅ Script location: %SCRIPT_DIR%

REM Backend ÎîîÎ†âÌÜ†Î¶¨ Ï∞æÍ∏∞ (Ïä§ÌÅ¨Î¶ΩÌä∏Ïùò ÏÉÅÏúÑ Ìè¥Îçî)
for %%i in ("%SCRIPT_DIR%") do set "BACKEND_DIR=%%~dpi"
echo üìÅ Backend directory: %BACKEND_DIR%

REM Backend Íµ¨Ï°∞ Í≤ÄÏ¶ù
if not exist "%BACKEND_DIR%vkis" (
    echo ‚ùå Error: 'vkis' virtual environment not found in backend directory
    echo üí° Expected structure: backend\vkis\
    echo üìÅ Backend directory: %BACKEND_DIR%
    pause
    exit /b 1
)

echo.
echo üîç Searching for running backend server processes...

REM Î∞©Î≤ï 1: Ìè¨Ìä∏ 8000ÏùÑ ÏÇ¨Ïö©ÌïòÎäî ÌîÑÎ°úÏÑ∏Ïä§ Ï∞æÍ∏∞
echo üì° Checking processes using port 8000...
for /f "tokens=5" %%a in ('netstat -ano ^| findstr :8000') do (
    set "PORT_PID=%%a"
)

if defined PORT_PID (
    echo ‚úÖ Found process using port 8000: %PORT_PID%
    
    REM ÌîÑÎ°úÏÑ∏Ïä§ Ï†ïÎ≥¥ ÌëúÏãú
    for /f "tokens=1,2,5" %%a in ('tasklist /FI "PID eq %PORT_PID%" /FO CSV /NH') do (
        echo   üìã Process %PORT_PID%: %%c
    )
    
    echo.
    echo üõë Stopping process using port 8000...
    echo   üîÑ Terminating process %PORT_PID%...
    taskkill /PID %PORT_PID% /T /F >nul 2>&1
    
    REM ÏµúÏ¢Ö ÌôïÏù∏
    timeout /t 2 /nobreak >nul
    tasklist /FI "PID eq %PORT_PID%" /FO CSV | findstr "%PORT_PID%" >nul
    if errorlevel 1 (
        echo ‚úÖ Successfully stopped process %PORT_PID%
    ) else (
        echo ‚ö†Ô∏è  Process %PORT_PID% may still be running
    )
    
    set "PORT_PID="
) else (
    echo ‚ÑπÔ∏è  No processes found using port 8000
)

echo.
echo üîç Searching for Python processes running simple_server.py...

REM Î∞©Î≤ï 2: simple_server.pyÎ•º Ïã§ÌñâÌïòÎäî Python ÌîÑÎ°úÏÑ∏Ïä§ Ï∞æÍ∏∞
for /f "tokens=2" %%a in ('tasklist /FI "IMAGENAME eq python.exe" /FO CSV /NH ^| findstr simple_server') do (
    set "PYTHON_PID=%%a"
    set "PYTHON_PID=!PYTHON_PID:"=!"
)

if defined PYTHON_PID (
    echo ‚úÖ Found Python process running simple_server.py: %PYTHON_PID%
    
    REM ÌîÑÎ°úÏÑ∏Ïä§ Ï†ïÎ≥¥ ÌëúÏãú
    for /f "tokens=1,2,5" %%a in ('tasklist /FI "PID eq %PYTHON_PID%" /FO CSV /NH') do (
        echo   üìã Process %PYTHON_PID%: %%c
    )
    
    echo.
    echo üõë Stopping Python process running simple_server.py...
    echo   üîÑ Terminating process %PYTHON_PID%...
    taskkill /PID %PYTHON_PID% /T /F >nul 2>&1
    
    REM ÏµúÏ¢Ö ÌôïÏù∏
    timeout /t 2 /nobreak >nul
    tasklist /FI "PID eq %PYTHON_PID%" /FO CSV | findstr "%PYTHON_PID%" >nul
    if errorlevel 1 (
        echo ‚úÖ Successfully stopped Python process %PYTHON_PID%
    ) else (
        echo ‚ö†Ô∏è  Python process %PYTHON_PID% may still be running
    )
    
    set "PYTHON_PID="
) else (
    echo ‚ÑπÔ∏è  No Python processes found running simple_server.py
)

echo.
echo üîç Searching for uvicorn processes...

REM Î∞©Î≤ï 3: uvicorn ÌîÑÎ°úÏÑ∏Ïä§ Ï∞æÍ∏∞ (FastAPI ÏÑúÎ≤Ñ)
for /f "tokens=2" %%a in ('tasklist /FI "IMAGENAME eq python.exe" /FO CSV /NH ^| findstr uvicorn') do (
    set "UVICORN_PID=%%a"
    set "UVICORN_PID=!UVICORN_PID:"=!"
)

if defined UVICORN_PID (
    echo ‚úÖ Found uvicorn process: %UVICORN_PID%
    
    REM ÌîÑÎ°úÏÑ∏Ïä§ Ï†ïÎ≥¥ ÌëúÏãú
    for /f "tokens=1,2,5" %%a in ('tasklist /FI "PID eq %UVICORN_PID%" /FO CSV /NH') do (
        echo   üìã Process %UVICORN_PID%: %%c
    )
    
    echo.
    echo üõë Stopping uvicorn process...
    echo   üîÑ Terminating process %UVICORN_PID%...
    taskkill /PID %UVICORN_PID% /T /F >nul 2>&1
    
    REM ÏµúÏ¢Ö ÌôïÏù∏
    timeout /t 2 /nobreak >nul
    tasklist /FI "PID eq %UVICORN_PID%" /FO CSV | findstr "%UVICORN_PID%" >nul
    if errorlevel 1 (
        echo ‚úÖ Successfully stopped uvicorn process %UVICORN_PID%
    ) else (
        echo ‚ö†Ô∏è  uvicorn process %UVICORN_PID% may still be running
    )
    
    set "UVICORN_PID="
) else (
    echo ‚ÑπÔ∏è  No uvicorn processes found
)

echo.
echo üìä Final Status Check:
echo =====================

REM ÏµúÏ¢Ö ÏÉÅÌÉú ÌôïÏù∏
set "FINAL_PORT_PID="
set "FINAL_PYTHON_PID="
set "FINAL_UVICORN_PID="

for /f "tokens=5" %%a in ('netstat -ano ^| findstr :8000') do (
    set "FINAL_PORT_PID=%%a"
)

for /f "tokens=2" %%a in ('tasklist /FI "IMAGENAME eq python.exe" /FO CSV /NH ^| findstr simple_server') do (
    set "FINAL_PYTHON_PID=%%a"
    set "FINAL_PYTHON_PID=!FINAL_PYTHON_PID:"=!"
)

for /f "tokens=2" %%a in ('tasklist /FI "IMAGENAME eq python.exe" /FO CSV /NH ^| findstr uvicorn') do (
    set "FINAL_UVICORN_PID=%%a"
    set "FINAL_UVICORN_PID=!FINAL_UVICORN_PID:"=!"
)

if not defined FINAL_PORT_PID if not defined FINAL_PYTHON_PID if not defined FINAL_UVICORN_PID (
    echo ‚úÖ All backend server processes have been successfully stopped!
    echo üåê Port 8000 is now available
    echo.
    echo üí° To start the server again, run:
    echo    backend\scripts\start_backend.bat
) else (
    echo ‚ö†Ô∏è  Some processes may still be running:
    if defined FINAL_PORT_PID echo    - Port 8000: %FINAL_PORT_PID%
    if defined FINAL_PYTHON_PID echo    - Python simple_server.py: %FINAL_PYTHON_PID%
    if defined FINAL_UVICORN_PID echo    - uvicorn: %FINAL_UVICORN_PID%
    echo.
    echo üí° If processes are still running, you may need to manually kill them:
    echo    taskkill /PID ^<process_id^> /F
)

echo.
echo ============================================
echo üèÅ Backend server stop script completed
pause


