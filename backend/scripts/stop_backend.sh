#!/bin/bash

# Stock Trading Backend Server Stop Script
# This script stops the running FastAPI backend server
# 
# ÏÇ¨Ïö©Î≤ï: Ïñ¥ÎîîÏÑúÎì† Ïã§Ìñâ Í∞ÄÎä•ÌïòÏßÄÎßå, backend ÏÑúÎ≤ÑÎ•º Ï∞æÏïÑÏÑú Ï§ëÏßÄÏãúÌÇµÎãàÎã§.

echo "üõë Stopping Stock Trading Backend Server..."
echo "============================================"

# Ïã§Ìñâ ÏúÑÏπò Ï†ÄÏû•
ORIGINAL_DIR="$(pwd)"
echo "üìÅ Original execution directory: $ORIGINAL_DIR"

# Ïä§ÌÅ¨Î¶ΩÌä∏ ÌååÏùºÏùò Ï†àÎåÄ Í≤ΩÎ°ú Ï∞æÍ∏∞
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
echo "üìÅ Script location: $SCRIPT_DIR"

# Backend ÎîîÎ†âÌÜ†Î¶¨ Ï∞æÍ∏∞ (Ïä§ÌÅ¨Î¶ΩÌä∏Ïùò ÏÉÅÏúÑ Ìè¥Îçî)
BACKEND_DIR="$(dirname "$SCRIPT_DIR")"
echo "üìÅ Backend directory: $BACKEND_DIR"

# Backend Íµ¨Ï°∞ Í≤ÄÏ¶ù
if [ ! -d "$BACKEND_DIR/vkis" ]; then
    echo "‚ùå Error: 'vkis' virtual environment not found in backend directory"
    echo "üí° Expected structure: backend/vkis/"
    echo "üìÅ Backend directory: $BACKEND_DIR"
    exit 1
fi

echo ""
echo "üîç Searching for running backend server processes..."

# Î∞©Î≤ï 1: Ìè¨Ìä∏ 8000ÏùÑ ÏÇ¨Ïö©ÌïòÎäî ÌîÑÎ°úÏÑ∏Ïä§ Ï∞æÍ∏∞
echo "üì° Checking processes using port 8000..."
PORT_PROCESSES=$(lsof -ti:8000 2>/dev/null)

if [ ! -z "$PORT_PROCESSES" ]; then
    echo "‚úÖ Found process(es) using port 8000: $PORT_PROCESSES"
    
    # Í∞Å ÌîÑÎ°úÏÑ∏Ïä§Ïóê ÎåÄÌï¥ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÌëúÏãú
    for pid in $PORT_PROCESSES; do
        PROCESS_INFO=$(ps -p $pid -o pid,ppid,cmd --no-headers 2>/dev/null)
        if [ ! -z "$PROCESS_INFO" ]; then
            echo "  üìã Process $pid: $PROCESS_INFO"
        fi
    done
    
    echo ""
    echo "üõë Stopping processes using port 8000..."
    
    # ÌîÑÎ°úÏÑ∏Ïä§Îì§ÏùÑ Ïö∞ÏïÑÌïòÍ≤å Ï¢ÖÎ£å ÏãúÎèÑ
    for pid in $PORT_PROCESSES; do
        echo "  üîÑ Sending SIGTERM to process $pid..."
        kill -TERM $pid 2>/dev/null
        
        # Ïû†Ïãú ÎåÄÍ∏∞ ÌõÑ Ïó¨Ï†ÑÌûà Ïã§Ìñâ Ï§ëÏù¥Î©¥ Í∞ïÏ†ú Ï¢ÖÎ£å
        sleep 2
        if kill -0 $pid 2>/dev/null; then
            echo "  ‚ö° Process $pid still running, sending SIGKILL..."
            kill -KILL $pid 2>/dev/null
        fi
    done
    
    # ÏµúÏ¢Ö ÌôïÏù∏
    sleep 1
    REMAINING_PROCESSES=$(lsof -ti:8000 2>/dev/null)
    if [ -z "$REMAINING_PROCESSES" ]; then
        echo "‚úÖ Successfully stopped all processes using port 8000"
    else
        echo "‚ö†Ô∏è  Some processes may still be running: $REMAINING_PROCESSES"
    fi
else
    echo "‚ÑπÔ∏è  No processes found using port 8000"
fi

echo ""
echo "üîç Searching for Python processes running simple_server.py..."

# Î∞©Î≤ï 2: simple_server.pyÎ•º Ïã§ÌñâÌïòÎäî Python ÌîÑÎ°úÏÑ∏Ïä§ Ï∞æÍ∏∞
PYTHON_PROCESSES=$(pgrep -f "simple_server.py" 2>/dev/null)

if [ ! -z "$PYTHON_PROCESSES" ]; then
    echo "‚úÖ Found Python process(es) running simple_server.py: $PYTHON_PROCESSES"
    
    # Í∞Å ÌîÑÎ°úÏÑ∏Ïä§Ïóê ÎåÄÌï¥ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÌëúÏãú
    for pid in $PYTHON_PROCESSES; do
        PROCESS_INFO=$(ps -p $pid -o pid,ppid,cmd --no-headers 2>/dev/null)
        if [ ! -z "$PROCESS_INFO" ]; then
            echo "  üìã Process $pid: $PROCESS_INFO"
        fi
    done
    
    echo ""
    echo "üõë Stopping Python processes running simple_server.py..."
    
    # ÌîÑÎ°úÏÑ∏Ïä§Îì§ÏùÑ Ïö∞ÏïÑÌïòÍ≤å Ï¢ÖÎ£å ÏãúÎèÑ
    for pid in $PYTHON_PROCESSES; do
        echo "  üîÑ Sending SIGTERM to process $pid..."
        kill -TERM $pid 2>/dev/null
        
        # Ïû†Ïãú ÎåÄÍ∏∞ ÌõÑ Ïó¨Ï†ÑÌûà Ïã§Ìñâ Ï§ëÏù¥Î©¥ Í∞ïÏ†ú Ï¢ÖÎ£å
        sleep 2
        if kill -0 $pid 2>/dev/null; then
            echo "  ‚ö° Process $pid still running, sending SIGKILL..."
            kill -KILL $pid 2>/dev/null
        fi
    done
    
    # ÏµúÏ¢Ö ÌôïÏù∏
    sleep 1
    REMAINING_PYTHON_PROCESSES=$(pgrep -f "simple_server.py" 2>/dev/null)
    if [ -z "$REMAINING_PYTHON_PROCESSES" ]; then
        echo "‚úÖ Successfully stopped all Python processes running simple_server.py"
    else
        echo "‚ö†Ô∏è  Some Python processes may still be running: $REMAINING_PYTHON_PROCESSES"
    fi
else
    echo "‚ÑπÔ∏è  No Python processes found running simple_server.py"
fi

echo ""
echo "üîç Searching for uvicorn processes..."

# Î∞©Î≤ï 3: uvicorn ÌîÑÎ°úÏÑ∏Ïä§ Ï∞æÍ∏∞ (FastAPI ÏÑúÎ≤Ñ)
UVICORN_PROCESSES=$(pgrep -f "uvicorn" 2>/dev/null)

if [ ! -z "$UVICORN_PROCESSES" ]; then
    echo "‚úÖ Found uvicorn process(es): $UVICORN_PROCESSES"
    
    # Í∞Å ÌîÑÎ°úÏÑ∏Ïä§Ïóê ÎåÄÌï¥ ÏÉÅÏÑ∏ Ï†ïÎ≥¥ ÌëúÏãú
    for pid in $UVICORN_PROCESSES; do
        PROCESS_INFO=$(ps -p $pid -o pid,ppid,cmd --no-headers 2>/dev/null)
        if [ ! -z "$PROCESS_INFO" ]; then
            echo "  üìã Process $pid: $PROCESS_INFO"
        fi
    done
    
    echo ""
    echo "üõë Stopping uvicorn processes..."
    
    # ÌîÑÎ°úÏÑ∏Ïä§Îì§ÏùÑ Ïö∞ÏïÑÌïòÍ≤å Ï¢ÖÎ£å ÏãúÎèÑ
    for pid in $UVICORN_PROCESSES; do
        echo "  üîÑ Sending SIGTERM to process $pid..."
        kill -TERM $pid 2>/dev/null
        
        # Ïû†Ïãú ÎåÄÍ∏∞ ÌõÑ Ïó¨Ï†ÑÌûà Ïã§Ìñâ Ï§ëÏù¥Î©¥ Í∞ïÏ†ú Ï¢ÖÎ£å
        sleep 2
        if kill -0 $pid 2>/dev/null; then
            echo "  ‚ö° Process $pid still running, sending SIGKILL..."
            kill -KILL $pid 2>/dev/null
        fi
    done
    
    # ÏµúÏ¢Ö ÌôïÏù∏
    sleep 1
    REMAINING_UVICORN_PROCESSES=$(pgrep -f "uvicorn" 2>/dev/null)
    if [ -z "$REMAINING_UVICORN_PROCESSES" ]; then
        echo "‚úÖ Successfully stopped all uvicorn processes"
    else
        echo "‚ö†Ô∏è  Some uvicorn processes may still be running: $REMAINING_UVICORN_PROCESSES"
    fi
else
    echo "‚ÑπÔ∏è  No uvicorn processes found"
fi

echo ""
echo "üìä Final Status Check:"
echo "====================="

# ÏµúÏ¢Ö ÏÉÅÌÉú ÌôïÏù∏
FINAL_PORT_PROCESSES=$(lsof -ti:8000 2>/dev/null)
FINAL_PYTHON_PROCESSES=$(pgrep -f "simple_server.py" 2>/dev/null)
FINAL_UVICORN_PROCESSES=$(pgrep -f "uvicorn" 2>/dev/null)

if [ -z "$FINAL_PORT_PROCESSES" ] && [ -z "$FINAL_PYTHON_PROCESSES" ] && [ -z "$FINAL_UVICORN_PROCESSES" ]; then
    echo "‚úÖ All backend server processes have been successfully stopped!"
    echo "üåê Port 8000 is now available"
    echo ""
    echo "üí° To start the server again, run:"
    echo "   ./backend/scripts/start_backend.sh"
else
    echo "‚ö†Ô∏è  Some processes may still be running:"
    [ ! -z "$FINAL_PORT_PROCESSES" ] && echo "   - Port 8000: $FINAL_PORT_PROCESSES"
    [ ! -z "$FINAL_PYTHON_PROCESSES" ] && echo "   - Python simple_server.py: $FINAL_PYTHON_PROCESSES"
    [ ! -z "$FINAL_UVICORN_PROCESSES" ] && echo "   - uvicorn: $FINAL_UVICORN_PROCESSES"
    echo ""
    echo "üí° If processes are still running, you may need to manually kill them:"
    echo "   kill -9 <process_id>"
fi

echo ""
echo "============================================"
echo "üèÅ Backend server stop script completed"

