import { useState, useEffect, useCallback, useRef } from 'react';
import { 
  AccountBalance, 
  WatchlistItem, 
  MarketOverview,
  ConnectionState,
  UseRealtimeDataReturn
} from '@/lib/types';
import { apiClient, fetchWithErrorHandling } from '@/lib/api-client';
import { 
  subscribeToAccountUpdates,
  subscribeToWatchlistUpdates,
  subscribeToConnectionStatus
} from '@/lib/websocket';
import { useWebSocket } from './useWebSocket';

/**
 * Ïã§ÏãúÍ∞Ñ Îç∞Ïù¥ÌÑ∞Î•º Í¥ÄÎ¶¨ÌïòÎäî ÌõÖ
 */
export function useRealtimeData(): UseRealtimeDataReturn {
  const [accountBalance, setAccountBalance] = useState<AccountBalance | null>(null);
  const [watchlist, setWatchlist] = useState<WatchlistItem[]>([]);
  const [marketOverview, setMarketOverview] = useState<MarketOverview | null>(null);
  const [connectionStatus, setConnectionStatus] = useState<ConnectionState>({
    status: 'disconnected',
    reconnectAttempts: 0,
  });
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  
  const { isConnected } = useWebSocket();
  const lastRefreshTime = useRef<Date>(new Date());

  // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  const loadInitialData = useCallback(async () => {
    setIsLoading(true);
    setError(null);

    try {
      // Î≥ëÎ†¨Î°ú Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
      const [accountResult, watchlistResult, marketResult] = await Promise.allSettled([
        fetchWithErrorHandling(() => apiClient.getAccountBalance()),
        fetchWithErrorHandling(() => apiClient.getWatchlist()),
        fetchWithErrorHandling(() => apiClient.getMarketOverview()),
      ]);

      // Í≥ÑÏ¢å Ï†ïÎ≥¥ ÏÑ§Ï†ï
      if (accountResult.status === 'fulfilled' && accountResult.value.data) {
        setAccountBalance(accountResult.value.data);
      } else if (accountResult.status === 'fulfilled' && accountResult.value.error) {
        console.error('Í≥ÑÏ¢å Ï†ïÎ≥¥ Î°úÎìú Ïã§Ìå®:', accountResult.value.error);
      }

      // ÏõåÏπòÎ¶¨Ïä§Ìä∏ ÏÑ§Ï†ï
      if (watchlistResult.status === 'fulfilled' && watchlistResult.value.data) {
        setWatchlist(watchlistResult.value.data);
      } else if (watchlistResult.status === 'fulfilled' && watchlistResult.value.error) {
        console.error('ÏõåÏπòÎ¶¨Ïä§Ìä∏ Î°úÎìú Ïã§Ìå®:', watchlistResult.value.error);
      }

      // ÏãúÏû• ÌòÑÌô© ÏÑ§Ï†ï
      if (marketResult.status === 'fulfilled' && marketResult.value.data) {
        setMarketOverview(marketResult.value.data);
      } else if (marketResult.status === 'fulfilled' && marketResult.value.error) {
        console.error('ÏãúÏû• ÌòÑÌô© Î°úÎìú Ïã§Ìå®:', marketResult.value.error);
      }

      lastRefreshTime.current = new Date();
    } catch (error) {
      console.error('Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïò§Î•ò:', error);
      setError('Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò§Îäî Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.');
    } finally {
      setIsLoading(false);
    }
  }, []);

  // Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
  const refreshData = useCallback(async () => {
    await loadInitialData();
  }, [loadInitialData]);

  // WebSocket Ïó∞Í≤∞ ÏÉÅÌÉú Î≥ÄÍ≤Ω Íµ¨ÎèÖ
  useEffect(() => {
    const unsubscribe = subscribeToConnectionStatus(setConnectionStatus);
    return unsubscribe;
  }, []);

  // Ï¥àÍ∏∞ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    loadInitialData();
  }, [loadInitialData]);

  // Í≥ÑÏ¢å ÏóÖÎç∞Ïù¥Ìä∏ Íµ¨ÎèÖ
  useEffect(() => {
    const unsubscribe = subscribeToAccountUpdates((data) => {
      setAccountBalance(data);
      setError(null); // ÏÑ±Í≥µÏ†ÅÏù∏ ÏóÖÎç∞Ïù¥Ìä∏ Ïãú ÏóêÎü¨ ÌÅ¥Î¶¨Ïñ¥
    });

    return unsubscribe;
  }, []);

  // ÏõåÏπòÎ¶¨Ïä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ Íµ¨ÎèÖ
  useEffect(() => {
    const unsubscribe = subscribeToWatchlistUpdates((data) => {
      console.log('üîÑ ÏõåÏπòÎ¶¨Ïä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ ÏàòÏã†:', data);
      setWatchlist([...data]); // ÏÉàÎ°úÏö¥ Î∞∞Ïó¥ÏùÑ ÏÉùÏÑ±ÌïòÏó¨ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
      setError(null); // ÏÑ±Í≥µÏ†ÅÏù∏ ÏóÖÎç∞Ïù¥Ìä∏ Ïãú ÏóêÎü¨ ÌÅ¥Î¶¨Ïñ¥
    });

    return unsubscribe;
  }, []);

  // Ïó∞Í≤∞ Ïû¨ÏÑ§Ï†ï Ïãú Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
  useEffect(() => {
    if (isConnected && connectionStatus.status === 'connected') {
      const timeSinceLastRefresh = Date.now() - lastRefreshTime.current.getTime();
      
      // 1Î∂Ñ Ïù¥ÏÉÅ ÏßÄÎÇ¨Í±∞ÎÇò ÏóêÎü¨Í∞Ä ÏûàÎäî Í≤ΩÏö∞ ÏÉàÎ°úÍ≥†Ïπ®
      if (timeSinceLastRefresh > 60000 || error) {
        refreshData();
      }
    }
  }, [isConnected, connectionStatus.status, error, refreshData]);

  // Ï†ïÍ∏∞Ï†ÅÏù∏ Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ® (WebSocket Ïó∞Í≤∞Ïù¥ ÎÅäÏñ¥ÏßÑ Í≤ΩÏö∞ ÎåÄÎπÑ)
  useEffect(() => {
    if (!isConnected) {
      const interval = setInterval(() => {
        refreshData();
      }, 30000); // 30Ï¥àÎßàÎã§ ÏÉàÎ°úÍ≥†Ïπ®

      return () => clearInterval(interval);
    }
  }, [isConnected, refreshData]);

  return {
    accountBalance,
    watchlist,
    connectionStatus,
    marketOverview,
    isLoading,
    error,
    refreshData,
  };
}